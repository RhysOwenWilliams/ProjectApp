package project.projectapp;

import android.app.ProgressDialog;
import android.content.ContentResolver;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.webkit.MimeTypeMap;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.tasks.Continuation;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthUserCollisionException;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.UserProfileChangeRequest;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.StorageTask;
import com.google.firebase.storage.UploadTask;
import com.theartofdev.edmodo.cropper.CropImage;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class CreateAccountActivity extends AppCompatActivity {

    private static final int IMAGE_REQUEST = 1;
    private EditText emailAddress, username, password, passwordCheck;
    private Button createAccountButton;
    private TextView alreadyHasAccount;
    private ImageView profileIcon;

    private ProgressDialog progressDialog;

    private FirebaseAuth firebaseAuth;
    private FirebaseUser firebaseUser;
    private DatabaseReference databaseReference;

    private String userId;

    private FirebaseUser addUserProfileImage;
    private String profileImageUrl;
    private Uri imageUri;
    private StorageReference imageStorage;

    @Override
    @Nullable
    protected void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        setContentView(R.layout.create_account_activity);

        firebaseAuth = FirebaseAuth.getInstance();
        firebaseUser = firebaseAuth.getCurrentUser();

        if(firebaseAuth.getCurrentUser() != null){
            finish();
            toMainActivity();
        }

        emailAddress = findViewById(R.id.edit_text_email_address);
        username = findViewById(R.id.edit_text_username);
        password = findViewById(R.id.edit_text_password);
        passwordCheck = findViewById(R.id.edit_text_password_check);
        profileIcon = findViewById(R.id.profile_icon);

        profileIcon.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openImage();
            }
        });

        progressDialog = new ProgressDialog(this);

        createAccountButton = findViewById(R.id.create_new_account);
        createAccountButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                registrationDataChecker();
            }
        });

        alreadyHasAccount = (TextView) findViewById(R.id.alreadyHasAccount);
        alreadyHasAccount.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                userSignUp(v);
            }
        });

        imageStorage = FirebaseStorage.getInstance().getReference();
    }

    private void toMainActivity(){
        Intent intent = new Intent(CreateAccountActivity.this, MainActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
    }

    private void openImage() {
        Intent intent = new Intent();
        intent.setType("image/*");
        intent.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(intent, IMAGE_REQUEST);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if(requestCode == IMAGE_REQUEST && resultCode == RESULT_OK && data != null && data.getData() != null){
            imageUri = data.getData();

            try {
                Bitmap bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), imageUri);
                profileIcon.setImageBitmap(cropToSquare(bitmap));
                storeImage();
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }

    public static Bitmap cropToSquare(Bitmap bitmap){
        int width  = bitmap.getWidth();
        int height = bitmap.getHeight();
        int newWidth = (height > width) ? width : height;
        int newHeight = (height > width)? height - ( height - width) : height;
        int cropW = (width - height) / 2;
        cropW = (cropW < 0)? 0: cropW;
        int cropH = (height - width) / 2;
        cropH = (cropH < 0)? 0: cropH;
        Bitmap cropImg = Bitmap.createBitmap(bitmap, cropW, cropH, newWidth, newHeight);

        return cropImg;
    }

    private void storeImage(){
        StorageReference reference = FirebaseStorage.getInstance().getReference("profileimages/" + System.currentTimeMillis() + ".jpg");

        if(profileIcon != null){
            progressDialog.setMessage("Uploading");
            progressDialog.show();
            reference.putFile(imageUri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                @Override
                public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                    progressDialog.dismiss();

                    profileImageUrl = taskSnapshot.getMetadata()
                            .getReference()
                            .getDownloadUrl()
                            .toString();
                }
            }).addOnFailureListener(new OnFailureListener() {
                @Override
                public void onFailure(@NonNull Exception e) {
                    progressDialog.dismiss();

                    Toast.makeText(CreateAccountActivity.this, e.getMessage(), Toast.LENGTH_SHORT).show();
                }
            });
            progressDialog.dismiss();
        }
    }

    private void registrationDataChecker(){
        final String newEmailAddress = emailAddress.getText().toString().trim();
        final String newUsername = username.getText().toString().trim();
        final String newPassword = password.getText().toString().trim();
        final String newPasswordCheck = passwordCheck.getText().toString().trim();

        if(TextUtils.isEmpty(newEmailAddress)){
            emailAddress.setError("This field cannot be empty");
            emailAddress.requestFocus();
            return;
        }
        if(TextUtils.isEmpty(newUsername)){
            username.setError("This field cannot be empty");
            username.requestFocus();
            return;
        }
        if(TextUtils.isEmpty(newPassword)){
            password.setError("This field cannot be empty");
            password.requestFocus();
            return;
        }
        if(TextUtils.isEmpty(newPasswordCheck)){
            passwordCheck.setError("This field cannot be empty");
            passwordCheck.requestFocus();
            return;
        }
        if(newPassword.length() < 6){
            password.setError("Password must be longer than 6 characters");
            password.requestFocus();
            return;
        }

        // Queries the database for username's so we can check if it is already taken
        Query query = FirebaseDatabase.getInstance().getReference().child("Users")
                .orderByChild("username")
                .equalTo(newUsername);
        query.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                if(dataSnapshot.getChildrenCount()>0) {
                    username.setError("Username already taken");
                    username.requestFocus();
                } else {
                    createNewAccount(newEmailAddress, newUsername, newPassword, newPasswordCheck);
                }
            }
            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
            }
        });

    }

    private void userSignUp(View v){
        Intent intent = new Intent(v.getContext(), LoginActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(intent);
        alreadyHasAccount.setTextColor(Color.parseColor("#800199"));
    }

    private void createNewAccount(String newEmailAddress, final String newUsername,
                                  String newPassword, String newPasswordCheck){
        if(TextUtils.equals(newPassword, newPasswordCheck)){
            progressDialog.setMessage("Checking details, please wait...");
            progressDialog.show();
            firebaseAuth.createUserWithEmailAndPassword(newEmailAddress, newPassword)
                    .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                        @Override
                        public void onComplete(@NonNull Task<AuthResult> task) {
                            if (task.getException() instanceof
                                    FirebaseAuthUserCollisionException) {
                                emailAddress.setError("This email address is already in use");
                                emailAddress.requestFocus();
                            } else if(!task.isSuccessful()){
                                Toast.makeText(CreateAccountActivity.this,
                                        "Registration failed", Toast.LENGTH_SHORT).show();
                            } else {
                                userId = firebaseAuth.getCurrentUser().getUid();
                                databaseReference = FirebaseDatabase.getInstance()
                                        .getReference()
                                        .child("Users")
                                        .child(userId);

                                Map newPost = new HashMap();
                                newPost.put("username", newUsername);

                                databaseReference.setValue(newPost);

                                addUserProfileImage = firebaseAuth.getCurrentUser();

                                if(profileImageUrl != null){
                                    UserProfileChangeRequest profile = new UserProfileChangeRequest
                                            .Builder()
                                            .setPhotoUri(Uri.parse(profileImageUrl))
                                            .build();
                                    Log.d("IMAGE", "Image tag - SET:" + profileImageUrl);
                                    addUserProfileImage.updateProfile(profile).addOnCompleteListener(new OnCompleteListener<Void>() {
                                        @Override
                                        public void onComplete(@NonNull Task<Void> task) {
                                            if(task.isSuccessful()){
                                                Toast.makeText(CreateAccountActivity.this, "Successfully Added Image", Toast.LENGTH_SHORT).show();

                                            }
                                        }
                                    });
                                }

                                toMainActivity();
                                finish();
                            }
                            progressDialog.hide();
                        }
                    });
        } else {
            password.setError("These passwords do not match");
            passwordCheck.setError("These passwords do not match");
            return;
        }
    }
}